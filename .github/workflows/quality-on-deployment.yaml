---
name: Quality On Deploy
run-name: ${{ github.event_name }} ${{ github.ref_name }} by @${{ github.actor }}

on:
  release:
    types: [published]

permissions:
  contents: write

env:
  THRESHOLD-FILE: 0
  THRESHOLD-PACKAGE: 0
  THRESHOLD-TOTAL: 10

jobs:
  check-tag:
    name: Check tag value
    runs-on: ubuntu-latest
    if:
      github.event.release.prerelease == false
    steps:
      - name: Check if Tag is SemVer
        id: check-tag
        uses: matt-usurp/validate-semver@v2
        with:
            version: ${{ github.event.release.tag_name }}
    outputs:
        major: ${{ steps.check-tag.outputs.major }}
        prerelease: ${{ steps.check-tag.outputs.prerelease }}
        build: ${{ steps.check-tag.outputs.build }}
  run-coverage:
    name: Run Coverage and update badges on Deployment
    runs-on: ubuntu-latest
    needs: check-tag
    if: |
      github.event.release.prerelease == false &&
      needs.check-tag.outputs.major != '' &&
      needs.check-tag.outputs.prerelease == '' &&
      needs.check-tag.outputs.build == ''
    strategy:
      matrix:
        feature: ['pkgs']
    continue-on-error: true
    steps:
      - name: Show output values
        run: |
          echo "major ${{ needs.check-tag.outputs.major }}"
          echo "prerelease ${{ needs.check-tag.outputs.prerelease }}"
          echo "build ${{ needs.check-tag.outputs.build }}"
          echo "tag ${{ github.event.release.tag_name }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version: '1.24.2'

      - name: Run make coverage
        id: coverage
        run: |
          cd ${{ matrix.feature }}
          make coverage
          echo "total=$(tail -n 1 coverage.total)" >> $GITHUB_OUTPUT
          cd ..

      - name: Run go-test-coverage
        id: test-coverage
        uses: vladopajic/go-test-coverage@v2
        with:
          profile: ${{ matrix.feature }}/coverage.out
          git-token: ${{  secrets.GITHUB_TOKEN }}
          git-branch: 'badge'
          git-file-name: '.badges/${{ matrix.feature }}-deploy-coverage.svg'
          threshold-file: ${{ env.THRESHOLD-FILE }}
          threshold-package: ${{ env.THRESHOLD-PACKAGE }}
          threshold-total: ${{ env.THRESHOLD-TOTAL }}
        continue-on-error: true

  update-version:
    name: Update version Badge
    runs-on: ubuntu-latest
    needs: run-coverage
    if: |
      github.event.release.prerelease == false &&
      needs.check-tag.outputs.major != '' &&
      needs.check-tag.outputs.prerelease == '' &&
      needs.check-tag.outputs.build == ''
    steps:
      - name: Checkout badge Branch
        uses: actions/checkout@v4
        with:
          ref: badge

      - name: create version badge
        id: version-badge
        uses: emibcn/badge-action@v2.0.2
        with:
          label: "Version"
          status: "${{ github.event.release.tag_name }}"
          path: ".badges/version-badge.svg"

      - name: Update coverage badge
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .badges/version-badge.svg
          git commit -m "update coverage on deploy badge" || true
          git push origin badge
